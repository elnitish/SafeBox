0771fbb9fcbdd452cfae

d1870b7e3891dc412c4d87f09df6de4fa051634b85910e00581752f0aaa03782

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySW5mb3JtYXRpb24iOnsiaWQiOiJiM2ViM2Q1Ny1hMzQ4LTRmMWEtYjAyNC00MWU1MmQ2YzBjOGMiLCJlbWFpbCI6ImVsbml0aXNoMTEwMkBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGluX3BvbGljeSI6eyJyZWdpb25zIjpbeyJkZXNpcmVkUmVwbGljYXRpb25Db3VudCI6MSwiaWQiOiJGUkExIn0seyJkZXNpcmVkUmVwbGljYXRpb25Db3VudCI6MSwiaWQiOiJOWUMxIn1dLCJ2ZXJzaW9uIjoxfSwibWZhX2VuYWJsZWQiOmZhbHNlLCJzdGF0dXMiOiJBQ1RJVkUifSwiYXV0aGVudGljYXRpb25UeXBlIjoic2NvcGVkS2V5Iiwic2NvcGVkS2V5S2V5IjoiMDc3MWZiYjlmY2JkZDQ1MmNmYWUiLCJzY29wZWRLZXlTZWNyZXQiOiJkMTg3MGI3ZTM4OTFkYzQxMmM0ZDg3ZjA5ZGY2ZGU0ZmEwNTE2MzRiODU5MTBlMDA1ODE3NTJmMGFhYTAzNzgyIiwiZXhwIjoxNzgxNjQxMDYyfQ.DKOJgqPjJIwCZf8dl4FnEJe_0ZJ-UbfpXlVlNm0_oEw


<script>
        // DOM Elements
        const uploadArea = document.getElementById('uploadArea');
        const fileInput = document.getElementById('fileInput');
        const uploadBtn = document.getElementById('uploadBtn');
        const uploadForm = document.getElementById('uploadForm');
        const fileList = document.getElementById('fileList');
        const searchInput = document.getElementById('searchInput');
        const statusMessage = document.getElementById('statusMessage');

        // Sample data for demonstration
        let files = [
            {
                id: 1,
                name: 'document.pdf',
                size: '2.5 MB',
                date: '2024-01-15',
                type: 'pdf'
            },
            {
                id: 2,
                name: 'image.jpg',
                size: '1.2 MB',
                date: '2024-01-14',
                type: 'image'
            }
        ];

        // Initialize dashboard
        function initDashboard() {
            updateStats();
            renderFileList();
            setupEventListeners();
        }

        // Update statistics
        function updateStats() {
            document.getElementById('totalFiles').textContent = files.length;
            document.getElementById('totalSize').textContent = '3.7 MB';
            document.getElementById('lastUpload').textContent = files.length > 0 ? '2 days ago' : 'Never';
        }

        // Render file list
        function renderFileList(filteredFiles = null) {
            const filesToRender = filteredFiles || files;
            
            if (filesToRender.length === 0) {
                fileList.innerHTML = `
                    <div style="text-align: center; color: var(--gray); padding: 2rem;">
                        <i class="fas fa-folder-open" style="font-size: 2rem; margin-bottom: 1rem;"></i>
                        <p>No files found</p>
                        <p style="font-size: 0.875rem;">Upload your first file to get started</p>
                    </div>
                `;
                return;
            }

            fileList.innerHTML = filesToRender.map(file => `
                <div class="file-item">
                    <div class="file-info">
                        <div class="file-icon">
                            <i class="fas fa-${getFileIcon(file.type)}"></i>
                        </div>
                        <div class="file-details">
                            <h4>${file.name}</h4>
                            <p>${file.size} â€¢ ${file.date}</p>
                        </div>
                    </div>
                    <div class="file-actions">
                        <button class="action-btn view" onclick="viewFile(${file.id})">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="action-btn delete" onclick="deleteFile(${file.id})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `).join('');
        }

        // Get file icon based on type
        function getFileIcon(type) {
            const icons = {
                'pdf': 'file-pdf',
                'image': 'file-image',
                'document': 'file-word',
                'spreadsheet': 'file-excel',
                'presentation': 'file-powerpoint',
                'archive': 'file-archive',
                'video': 'file-video',
                'audio': 'file-audio'
            };
            return icons[type] || 'file';
        }

        // Show status message
        function showStatus(message, type) {
            statusMessage.textContent = message;
            statusMessage.className = `status-message status-${type}`;
            statusMessage.style.display = 'block';
            
            setTimeout(() => {
                statusMessage.style.display = 'none';
            }, 5000);
        }

        // Setup event listeners
        function setupEventListeners() {
            // File input change
            fileInput.addEventListener('change', function(e) {
                const file = e.target.files[0];
                if (file) {
                    uploadBtn.disabled = false;
                    showStatus(`Selected: ${file.name}`, 'success');
                }
            });

            // Upload area click
            uploadArea.addEventListener('click', () => {
                fileInput.click();
            });

            // Drag and drop
            uploadArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                uploadArea.classList.add('dragover');
            });

            uploadArea.addEventListener('dragleave', () => {
                uploadArea.classList.remove('dragover');
            });

            uploadArea.addEventListener('drop', (e) => {
                e.preventDefault();
                uploadArea.classList.remove('dragover');
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    fileInput.files = files;
                    uploadBtn.disabled = false;
                    showStatus(`Selected: ${files[0].name}`, 'success');
                }
            });

            // Form submission
            uploadForm.addEventListener('submit', function(e) {
                e.preventDefault();
                const formData = new FormData(this);
                
                // Simulate upload
                showStatus('Uploading file...', 'success');
                uploadBtn.disabled = true;
                uploadBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Uploading...';
                
                setTimeout(() => {
                    // Add new file to list
                    const newFile = {
                        id: Date.now(),
                        name: formData.get('fileName') || fileInput.files[0].name,
                        size: '1.5 MB',
                        date: new Date().toISOString().split('T')[0],
                        type: 'document'
                    };
                    files.unshift(newFile);
                    
                    updateStats();
                    renderFileList();
                    showStatus('File uploaded successfully!', 'success');
                    
                    // Reset form
                    uploadForm.reset();
                    uploadBtn.disabled = true;
                    uploadBtn.innerHTML = '<i class="fas fa-upload"></i> Upload File';
                }, 2000);
            });

            // Search functionality
            searchInput.addEventListener('input', function(e) {
                const searchTerm = e.target.value.toLowerCase();
                const filteredFiles = files.filter(file => 
                    file.name.toLowerCase().includes(searchTerm)
                );
                renderFileList(filteredFiles);
            });
        }

        // File actions
        function viewFile(fileId) {
            const file = files.find(f => f.id === fileId);
            showStatus(`Viewing ${file.name}`, 'success');
            // Add actual file viewing logic here
        }

        function deleteFile(fileId) {
            if (confirm('Are you sure you want to delete this file?')) {
                files = files.filter(f => f.id !== fileId);
                updateStats();
                renderFileList();
                showStatus('File deleted successfully', 'success');
            }
        }

        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initDashboard();
            
            // Simulate loading user address
            setTimeout(() => {
                document.getElementById('userAddress').textContent = '0x1234...5678';
            }, 1000);
        });
    </script>



    //success
    
    <script>
        // Get URL parameters to populate file details
        const urlParams = new URLSearchParams(window.location.search);
        
        // Populate file details from URL parameters or use defaults
        document.getElementById('fileName').textContent = urlParams.get('fileName') || 'document.pdf';
        document.getElementById('fileSize').textContent = urlParams.get('fileSize') || '2.5 MB';
        document.getElementById('ipfsHash').textContent = urlParams.get('ipfsHash') || 'QmX...abc123';
        document.getElementById('txHash').textContent = urlParams.get('txHash') || '0x1234...abcd';
        document.getElementById('blockNumber').textContent = urlParams.get('blockNumber') || '18,456,789';
        document.getElementById('gasUsed').textContent = urlParams.get('gasUsed') || '45,000';
        
        // Set current timestamp
        const now = new Date();
        document.getElementById('timestamp').textContent = now.toISOString().replace('T', ' ').substring(0, 19) + ' UTC';
        document.getElementById('uploadTime').textContent = 'Just now';

        // Add some animation to the success icon
        const successIcon = document.querySelector('.success-icon');
        successIcon.style.animation = 'pulse 2s infinite';

        // Add CSS animation
        const style = document.createElement('style');
        style.textContent = `
            @keyframes pulse {
                0% { transform: scale(1); }
                50% { transform: scale(1.05); }
                100% { transform: scale(1); }
            }
        `;
        document.head.appendChild(style);
    </script>







    <div class="blockchain-info">
                    <h3><i class="fas fa-cube"></i> Blockchain Transaction Details</h3>
                    <p>Your file metadata has been permanently recorded on the Ethereum blockchain.</p>
                    <div class="blockchain-details">
                        <div class="blockchain-detail">
                            <i class="fas fa-hashtag"></i>
                            <span><strong>Transaction Hash:</strong>
                                <%= txHash %>
                            </span>
                        </div>
                        <div class="blockchain-detail">
                            <i class="fas fa-cube"></i>
                            <span><strong>Block Number:</strong>
                                <%= blockNumber %>
                            </span>
                        </div>
                        <div class="blockchain-detail">
                            <i class="fas fa-gas-pump"></i>
                            <span><strong>Gas Used:</strong>
                                <%= gasUsed %>
                            </span>
                        </div>
                        <div class="blockchain-detail">
                            <i class="fas fa-clock"></i>
                            <span><strong>Timestamp:</strong>
                                <%= timestamp %>
                            </span>
                        </div>
                    </div>
                </div> 